"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def recur_method(number, even=0, odd=0):
    """Recursion"""
    if number == 0:
        return even, odd
    else:
        current_number = number % 10
        number = number // 10
        if current_number % 2 == 0:
            even += 1
            return recur_method(number, even, odd)
        else:
            odd += 1
            recur_method(number, even, odd)


try:
    user_number = int(input('Введите натуральное число:'))
    print(f'Количество четных и нечетных цифр в числе равно: {recur_method(user_number)}')
except ValueError:
    print('Вы вместо симла ввели строку, исправьтесь!')
