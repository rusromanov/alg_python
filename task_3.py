"""
Задание 3.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

comp_data = {
    'Yandex': 100000,
    'Mail': 900000,
    'Rambler': 100,
    'Google': 999999999,
    'SpaceX': 1,
}

# 1)
comp_list = list(comp_data.items())  # O(len)
comp_list.sort(key=lambda idx: idx[1])  # O(n log n)
comp_list.reverse()  # O(n)

i = 1
for el in comp_list[:3]:  # O(n)
    print(f'{i} : {el[0]} Доход: {el[1]}')  # O(1)
    i += 1


# Сложность O(n log n)


# 2)
def top3_comp(list_input):
    input_max = {}
    list_d = dict(list_input)   # O(len)
    for i in range(3):   # O(n)
        maximum = max(list_d.items(), key=lambda k_v: k_v[1])   # O(n)
        del list_d[maximum[0]]   # O(n)
        input_max[maximum[0]] = maximum[1]   # O(n)
    return input_max   # O(1)


print(top3_comp(comp_data))

# Сложность O(n)

"""
Лучший вариан второй , потому что сложность O(n), а у первого O(n log n) из-за 
втроенной фнкции sort().
"""